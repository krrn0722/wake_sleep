import numpy as np
from create_data import create_input_data
from create_data import create_input_data_all

def check(arr):
    ver_check = False
    hor_check = False
    # 配列が4x4であることを確認
    if arr.shape != (4, 4):
        raise ValueError("配列は4x4でなければなりません")
    
    # 各列で1が4つ揃っているかチェック
    for col in range(4):
        if np.all(arr[:, col] == 1):
            ver_check = True
            break
    for row in range(4):
        if np.all(arr[row, :] == 1):
            hor_check = True
            break
    return ver_check , hor_check

def sigmoid(x):
    return np.exp(np.minimum(x, 0)) / (1 + np.exp(- np.abs(x)))

w_g_single = np.array([[-0.29827652, -0.00069164]])

w_g_kj = np.array([[ -0.26144732, -6.25823983, -1.7932414, 0.28334412, -6.13055345, 0.19124223, -1.90881357, -9.6388685 ], [ -0.19476153, 6.59676074, -14.88079773, 16.68429364, 6.1584592, 0.1678363, 3.76250841, -7.4896625 ], [  0.68961213, -0.2382437, 6.4494803, -8.44414947, 0.20734814, 0.13888404, -0.70994735, 8.53983402]])

w_g_ji_reshape = np.array([[[-1.82304724e+01, -1.59274887e+01, -1.38354871e+01, -1.35561693e+01], [-1.33624497e+01, 2.72184999e-01, 8.21420245e+00, 1.64169275e+00], [-1.60335209e+01, -3.95523908e-01, 7.36075193e+00, 3.73059137e+00], [-1.48500338e+01, 4.67907925e+00, 9.31192911e+00, 5.95533671e+00]], [[ 3.00105679e-01, 1.54605261e+00, 9.65594248e-01, -2.57492141e+01], [-4.72605836e-01, 1.35998360e-01, -1.37782598e+00, -2.57144410e+01], [-1.12545654e-01, 7.77544615e-01, -2.07540298e+00, -1.95898647e+01], [-1.04639708e+00, -1.84267537e+00, -3.38481648e+00, -2.25191090e+01]], [[ 9.54139616e-01, 1.87417936e+00, -4.79359227e+00, -4.08066551e+00], [ 3.93168626e+00, 4.19436594e+00, -6.03560564e+00, -3.52397200e+00], [-1.43980050e+00, -9.90520321e-01, -6.82790866e+00, -5.41832966e+00], [ 6.51807566e+00, 4.84388316e+00, 2.53689184e+00, 4.77005489e+00]], [[ 9.28895930e-01, -9.20807344e-01, 2.01071980e+01, 2.10284385e+01], [-1.58246993e+01, -1.03277616e+01, 7.60146850e+00, 8.26538365e+00], [-1.27758675e+00, -3.26806413e+00, 1.14065535e+01, 1.25230354e+01], [-2.15680762e+01, -1.68184828e+01, -9.72123001e+00, -8.71442435e+00]], [[ 5.52490532e-01, 1.44613515e+00, -2.61437944e+01, 1.86195301e-01], [ 2.00808409e+01, 1.48316508e+01, -1.48512371e+01, 1.30472666e+01], [-3.34002751e-03, 7.95410552e-01, -1.88539242e+01, -4.95358907e+00], [-1.10964118e+00, -1.17265508e+00, -2.22932398e+01, -4.54227328e+00]], [[ 3.63318077e-01, 5.45673673e-01, 1.09826696e+00, -4.76421640e-01], [ 2.32289143e+01, 1.70879261e+01, 2.54114162e+01, 1.50878650e+01], [-5.29851475e-02, -6.39012604e-02, 4.01271967e+00, -5.20652064e+00], [-2.74013546e-02, 4.60812084e-01, 5.46076069e+00, -4.73902942e+00]], [[ 6.31393642e-02, -1.52833487e+01, -1.20923964e+01, -1.26718422e+01], [ 1.10494582e+01, -2.08423864e+00, 3.68572439e+00, -1.56170544e-01], [ 1.59435652e+01, 3.87218943e-01, 5.67383521e+00, 5.27355955e+00], [ 1.42563202e+01, -5.58842961e+00, 6.22957843e+00, 7.39189279e+00]], [[ 1.31571311e-01, 1.44583243e+01, 1.20082221e+01, 1.27808199e+01], [-1.07591777e+01, 2.16505603e+00, -1.65646611e+00, 7.61460797e-01], [ 1.59391672e+01, 1.73885438e+01, 2.56932921e+01, 2.69634139e+01], [-1.35658576e+01, 6.76577734e+00, -4.26276001e+00, -2.69292918e+00]], [[ 7.29325092e+00, 6.06593804e+00, 1.11442388e+01, 1.11682232e+01], [-8.61922120e+00, -1.30133560e+01, -1.03706959e+01, -4.86937438e+00], [-6.45210727e+00, -7.18621265e+00, -1.32510648e+01, -6.61670166e+00], [ 1.59368228e+01, 4.32219698e+00, 8.13176861e+00, 1.23912399e+01]]])

w_g_ji = w_g_ji_reshape.reshape(9, 16)

generated_list = []

for i in range(100):
    ## トップダウンで生成
    # generative single biasを使用
    p_k = sigmoid(w_g_single)
    # 確率に従ってサンプリング
    s_k = np.random.binomial(1, p_k)

    # バイアスを追加
    s_k_appended = np.append(s_k, 1)
    # 重みづけの和を計算
    p_j = s_k_appended @ w_g_kj
    p_j = sigmoid(p_j)
    # 確率に従ってサンプリング
    s_j = np.random.binomial(1, p_j)

    # バイアスを追加s
    s_j_appended = np.append(s_j, 1)
    # 重みづけの和を計算
    p_i = s_j_appended @ w_g_ji
    p_i = sigmoid(p_i)
    # 確率に従ってサンプリング
    s_i = np.random.binomial(1, p_i)

    generated_list.append(s_i.reshape(4,4))


results = list(map(check, generated_list))

both_t_count = 0
ver_count = 0
hor_count = 0
both_f_count = 0

for result in results:
    if(result[0] and result[1]):
        both_t_count += 1
    elif(result[0]):
        ver_count += 1
    elif(result[1]):
        hor_count += 1
    else:
        both_f_count += 1

print("どっちも:",both_t_count,"\n","縦:", ver_count, "\n" ,"横:", hor_count,"\n" ,"なし:",both_f_count)

with open('generated_list.txt', 'w') as f:
    for i in range(len(generated_list)):
        f.write(str(generated_list[i]) + '\n'+'\n')